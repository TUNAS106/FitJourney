import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import '../../more/pages/more_page.dart';
import '../data/models/body_metric.dart';


class BodyMetricsController {
  final _firestore = FirebaseFirestore.instance;
  final _auth = FirebaseAuth.instance;


  String getBmiAdvice(double bmi) {
    if (bmi < 16) {
      return '''
‚ö†Ô∏è B·∫°n b·ªã g·∫ßy ƒë·ªô III (r·∫•t g·∫ßy).
- Nguy c∆°: Suy dinh d∆∞·ª°ng n·∫∑ng, h·ªá mi·ªÖn d·ªãch y·∫øu, d·ªÖ m·∫Øc b·ªánh, lo√£ng x∆∞∆°ng, thi·∫øu m√°u.
- Nguy√™n nh√¢n th∆∞·ªùng g·∫∑p: Ch·∫ø ƒë·ªô ƒÉn thi·∫øu dinh d∆∞·ª°ng, b·ªánh m√£n t√≠nh, r·ªëi lo·∫°n ƒÉn u·ªëng.
- L·ªùi khuy√™n: Kh√°m b√°c sƒ© ngay ƒë·ªÉ ki·ªÉm tra s·ª©c kh·ªèe t·ªïng qu√°t. ƒÇn nhi·ªÅu b·ªØa nh·ªè gi√†u ƒë·∫°m (th·ªãt, c√°, tr·ª©ng, s·ªØa), b·ªï sung vitamin, ng·ªß ƒë·ªß gi·∫•c v√† t·∫≠p luy·ªán nh·∫π nh√†ng.
''';
    } else if (bmi < 17) {
      return '''
B·∫°n b·ªã g·∫ßy ƒë·ªô II.
- Nguy c∆°: Thi·∫øu nƒÉng l∆∞·ª£ng, ch√≥ng m·∫∑t, m·ªát m·ªèi, gi·∫£m kh·∫£ nƒÉng t·∫≠p trung.
- Nguy√™n nh√¢n th∆∞·ªùng g·∫∑p: ƒÇn u·ªëng kh√¥ng ƒë·ªß ch·∫•t, stress, b·ªánh l√Ω ti√™u h√≥a.
- L·ªùi khuy√™n: TƒÉng kh·∫©u ph·∫ßn ƒÉn gi√†u dinh d∆∞·ª°ng, b·ªï sung c√°c lo·∫°i h·∫°t, s·ªØa nguy√™n kem, t·∫≠p c√°c b√†i tƒÉng c∆° ƒë·ªÉ c·∫£i thi·ªán c√¢n n·∫∑ng.
''';
    } else if (bmi < 18.5) {
      return '''
B·∫°n b·ªã g·∫ßy ƒë·ªô I.
- Nguy c∆°: S·ª©c ƒë·ªÅ kh√°ng y·∫øu, d·ªÖ nhi·ªÖm b·ªánh, ·∫£nh h∆∞·ªüng ti√™u h√≥a.
- L·ªùi khuy√™n: ƒÇn ƒë·ªß 3 b·ªØa ch√≠nh v√† 2-3 b·ªØa ph·ª• m·ªói ng√†y, u·ªëng sinh t·ªë tr√°i c√¢y + s·ªØa, k·∫øt h·ª£p t·∫≠p gym ƒë·ªÉ tƒÉng c∆°, tr√°nh ch·ªâ tƒÉng m·ª°.
''';
    } else if (bmi < 20) {
      return '''
B·∫°n ·ªü m·ª©c b√¨nh th∆∞·ªùng nh∆∞ng h∆°i th·∫•p.
- L·ªùi khuy√™n: Duy tr√¨ ch·∫ø ƒë·ªô ƒÉn l√†nh m·∫°nh, tƒÉng th√™m th·ª±c ph·∫©m gi√†u ƒë·∫°m v√† tinh b·ªôt t·ªët ƒë·ªÉ ƒë·∫°t BMI l√Ω t∆∞·ªüng (20-22).
''';
    } else if (bmi < 24) {
      return '''
üéØ BMI ho√†n h·∫£o!
- L·ªùi khuy√™n: Ti·∫øp t·ª•c duy tr√¨ ch·∫ø ƒë·ªô ƒÉn c√¢n b·∫±ng (50% tinh b·ªôt, 25% ƒë·∫°m, 25% ch·∫•t b√©o t·ªët), t·∫≠p luy·ªán ƒë·ªÅu ƒë·∫∑n v√† ng·ªß ƒë·ªß gi·∫•c.
''';
    } else if (bmi < 25) {
      return '''
B·∫°n ·ªü m·ª©c b√¨nh th∆∞·ªùng cao.
- Nguy c∆°: N·∫øu kh√¥ng ki·ªÉm so√°t, d·ªÖ chuy·ªÉn sang th·ª´a c√¢n.
- L·ªùi khuy√™n: TƒÉng v·∫≠n ƒë·ªông h·∫±ng ng√†y, h·∫°n ch·∫ø th·ª©c ƒÉn nhanh v√† ƒë·ªì u·ªëng c√≥ ƒë∆∞·ªùng.
''';
    } else if (bmi < 27) {
      return '''
B·∫°n b·ªã th·ª´a c√¢n nh·∫π.
- Nguy c∆°: TƒÉng nguy c∆° cao huy·∫øt √°p, m·ª° m√°u.
- L·ªùi khuy√™n: Gi·∫£m kh·∫©u ph·∫ßn tinh b·ªôt tinh ch·∫ø (c∆°m tr·∫Øng, b√°nh m√¨ tr·∫Øng), ƒÉn nhi·ªÅu rau xanh, t·∫≠p cardio √≠t nh·∫•t 150 ph√∫t/tu·∫ßn.
''';
    } else if (bmi < 30) {
      return '''
B·∫°n th·ª´a c√¢n ƒë·ªô I.
- Nguy c∆°: Kh√≥ th·ªü khi v·∫≠n ƒë·ªông, ƒëau kh·ªõp, tƒÉng nguy c∆° ti·ªÉu ƒë∆∞·ªùng type 2.
- L·ªùi khuy√™n: √Åp d·ª•ng ch·∫ø ƒë·ªô ƒÉn √≠t ƒë∆∞·ªùng, tƒÉng t·∫≠p luy·ªán s·ª©c b·ªÅn (ch·∫°y b·ªô, ƒë·∫°p xe, b∆°i), ng·ªß s·ªõm ƒë·ªÉ ·ªïn ƒë·ªãnh hormone.
''';
    } else if (bmi < 35) {
      return '''
B√©o ph√¨ ƒë·ªô I.
- Nguy c∆°: TƒÉng nguy c∆° b·ªánh tim m·∫°ch, gan nhi·ªÖm m·ª°, ti·ªÉu ƒë∆∞·ªùng.
- L·ªùi khuy√™n: Tham kh·∫£o chuy√™n gia dinh d∆∞·ª°ng, ƒÉn nhi·ªÅu rau qu·∫£, gi·∫£m t·ªëi ƒëa n∆∞·ªõc ng·ªçt, t·∫≠p th·ªÉ d·ª•c k·∫øt h·ª£p cardio v√† t·∫°.
''';
    } else if (bmi < 40) {
      return '''
B√©o ph√¨ ƒë·ªô II (nguy c∆° cao).
- Nguy c∆°: TƒÉng nguy c∆° ƒë·ªôt qu·ªµ, huy·∫øt √°p cao, ng∆∞ng th·ªü khi ng·ªß.
- L·ªùi khuy√™n: B·∫Øt ƒë·∫ßu k·∫ø ho·∫°ch gi·∫£m c√¢n nghi√™m t√∫c d∆∞·ªõi s·ª± h∆∞·ªõng d·∫´n c·ªßa b√°c sƒ©. K·∫øt h·ª£p ƒÉn ki√™ng khoa h·ªçc v√† t·∫≠p luy·ªán c∆∞·ªùng ƒë·ªô ph√π h·ª£p.
''';
    } else {
      return '''
üö® B√©o ph√¨ ƒë·ªô III (r·∫•t nguy hi·ªÉm).
- Nguy c∆°: Nguy hi·ªÉm ƒë·∫øn t√≠nh m·∫°ng, bi·∫øn ch·ª©ng tim m·∫°ch, ti·ªÉu ƒë∆∞·ªùng, suy h√¥ h·∫•p.
- L·ªùi khuy√™n: G·∫∑p b√°c sƒ© ngay ƒë·ªÉ l·∫≠p k·∫ø ho·∫°ch ƒëi·ªÅu tr·ªã y khoa. C√≥ th·ªÉ c·∫ßn can thi·ªáp y t·∫ø (thu·ªëc ho·∫∑c ph·∫´u thu·∫≠t gi·∫£m c√¢n) k·∫øt h·ª£p ch·∫ø ƒë·ªô ƒÉn v√† v·∫≠n ƒë·ªông.
''';
    }
  }

  Future<void> submitMetrics({
    required BuildContext context,
    required double weight,
    required double height,
    required int age,
  }) async {
    try {
      final bmi = _calculateBMI(weight, height);
      final metrics = BodyMetrics(
        weight: weight,
        height: height,
        age: age,
        bmi: bmi,
        timestamp: DateTime.now(),
      );

      await _showBMIDialog(context, bmi);

      final user = _auth.currentUser;
      if (user == null) {
        _showErrorDialog(context, "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p.");
        return;
      }

      await _firestore
          .collection('users')
          .doc(user.uid)
          .collection('body_metrics')
          .add(metrics.toMap());
      Navigator.pop(context); // Th√™m d√≤ng n√†y
    } catch (e) {
      _showErrorDialog(context, e.toString());
    }
  }

  double _calculateBMI(double weight, double heightCm) {
    final heightM = heightCm / 100;
    return weight / (heightM * heightM);
  }

  Future<void> _showBMIDialog(BuildContext context, double bmi) async {
    String advice = getBmiAdvice(bmi);

    await showDialog(
      context: context,
      builder: (context) => AlertDialog(
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(16),
        ),
        title: Row(
          children: [
            Icon(Icons.health_and_safety, color: Colors.teal, size: 28),
            SizedBox(width: 8),
            Text(
              'Ch·ªâ s·ªë BMI c·ªßa b·∫°n',
              style: TextStyle(fontWeight: FontWeight.bold),
            ),
          ],
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              '${bmi.toStringAsFixed(1)}',
              style: TextStyle(
                fontSize: 28,
                fontWeight: FontWeight.bold,
                color: Colors.teal,
              ),
            ),
            SizedBox(height: 12),
            Text(
              advice,
              style: TextStyle(fontSize: 16),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            style: TextButton.styleFrom(
              foregroundColor: Colors.white,
              backgroundColor: Colors.teal,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(8),
              ),
            ),
            child: Text('OK'),
          ),
        ],
      ),
    );
  }

  void _showErrorDialog(BuildContext context, String message) {
    showDialog(
      context: context,
      builder: (_) => AlertDialog(
        title: Text("L·ªói"),
        content: Text(message),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text("ƒê√≥ng"),
          ),
        ],
      ),
    );
  }
  Future<List<BodyMetrics>> fetchBodyMetrics(String userId) async {
    final snapshot = await FirebaseFirestore.instance
        .collection('users')
        .doc(userId)
        .collection('body_metrics')
        .orderBy('timestamp')
        .get();

    final metrics = snapshot.docs
        .map((doc) => BodyMetrics.fromFirestore(doc.data()))
        .toList();

    return metrics;
  }
  Future<void> checkUserBmiReminder(String userId, BuildContext context) async {
    final metrics = await fetchBodyMetrics(userId);
    if (metrics.isEmpty) {
      // Ch∆∞a c√≥ d·ªØ li·ªáu BMI l·∫ßn n√†o ‚Üí b·∫Øt bu·ªôc nh·∫≠p ngay
      await showDialog(
        context: context,
        builder: (_) => AlertDialog(
          title: const Text('Nh·∫≠p ch·ªâ s·ªë BMI'),
          content: const Text('B·∫°n ch∆∞a nh·∫≠p ch·ªâ s·ªë BMI l·∫ßn n√†o. Vui l√≤ng nh·∫≠p ƒë·ªÉ theo d√µi s·ª©c kh·ªèe.'),
          actions: [
            TextButton(
              child: const Text('ƒê·ªÉ sau'),
              onPressed: () => Navigator.pop(context),
            ),
            TextButton(
              child: const Text('Nh·∫≠p ngay'),
              onPressed: () {
                //Navigator.pop(context);
                Navigator.pushReplacement(context, MaterialPageRoute(builder: (_) => BodyMetricsFormPage(onProgressUpdated: () {  },)));
              },
            ),
          ],
        ),
        barrierDismissible: false, // Kh√¥ng cho t·∫Øt dialog khi b·∫•m ngo√†i
      );
      return;
    }
    final lastMetrics = metrics.last;
    // L·∫•y ch·ªâ s·ªë BMI g·∫ßn nh·∫•t (theo timestamp cu·ªëi c√πng)
    final daysSinceLast = DateTime.now().difference(lastMetrics.timestamp).inDays;
    //final hoursSinceLast = DateTime.now().difference(lastMetrics.timestamp).inHours;
    //final secondsSinceLast = DateTime.now().difference(lastMetrics.timestamp).inSeconds;
    //final minutesSinceLast = DateTime.now().difference(lastMetrics.timestamp).inMinutes;
    if (daysSinceLast  >=7) {
      // Hi·ªÉn th·ªã dialog nh·∫Øc nh·ªü
      await showDialog(
        context: context,
        builder: (_) => AlertDialog(
          title: const Text('Nh·∫Øc nh·ªü ch·ªâ s·ªë BMI'),
          content: const Text('ƒê√£ 7 ng√†y k·ªÉ t·ª´ l·∫ßn nh·∫≠p BMI tr∆∞·ªõc. H√£y nh·∫≠p l·∫°i ƒë·ªÉ c·∫≠p nh·∫≠t s·ª©c kh·ªèe.'),
          actions: [
            TextButton(
              child: const Text('ƒê·ªÉ sau'),
              onPressed: () => Navigator.pop(context),
            ),
            TextButton(
              child: const Text('Nh·∫≠p ngay'),
              onPressed: () {
                Navigator.pop(context);
                // ƒêi·ªÅu h∆∞·ªõng t·ªõi m√†n nh·∫≠p BMI
                Navigator.push(context, MaterialPageRoute(builder: (_) => BodyMetricsFormPage(onProgressUpdated: () {  },)));
              },
            ),
          ],
        ),
      );
    }
  }
}

